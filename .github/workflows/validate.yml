name: Validar Ejercicio Completo

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Chequear el código
        uses: actions/checkout@v2
        with:
          repository: Akradeveloper/Selenium-exercises
          token: ${{ secrets.TOKEN_GITHUB }}
          ref: ${{ github.head_ref }}

      # Parse PR description to find marked exercises and language
      - name: Analizar descripción del PR
        id: parse_pr_description
        run: |
          PR_DESCRIPTION="${{ github.event.pull_request.body }}"

          # Detect language
          if echo "$PR_DESCRIPTION" | grep -q '\- \[X\] Java'; then
            echo "language=java" >> $GITHUB_ENV
          elif echo "$PR_DESCRIPTION" | grep -q '\- \[X\] JS'; then
            echo "language=javascript" >> $GITHUB_ENV
          else
            echo "ERROR: No se especificó el lenguaje de programación o más de uno fue marcado."
            exit 1
          fi

          # Detect exercises
          EXERCISES=""
          for i in {1..5}; do
            if echo "$PR_DESCRIPTION" | grep -q "\- \[X\] Ejercicio $i"; then
              EXERCISES="$EXERCISES $i"
            fi
          done
          if [ -z "$EXERCISES" ]; then
            echo "ERROR: No se marcaron ejercicios para validar."
            exit 1
          fi
          echo "marked_exercises=$EXERCISES" >> $GITHUB_ENV

      # Validate based on marked exercises and language
      - name: Validar ejercicios seleccionados
        id: validate_exercises
        run: |
          ERROR_FLAG=0
          ERROR_MESSAGES=""

          validate_exercise() {
            EXERCISE=$1
            FOLDER="./ejercicio-$EXERCISE"
            LANGUAGE="${{ env.language }}"

            # General validation checks
            if [ ! -d "$FOLDER/src/pages" ]; then
              ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta el directorio src/pages en $FOLDER"
              ERROR_FLAG=1
            fi
            if [ ! -d "$FOLDER/src/tests" ]; then
              ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta el directorio src/tests en $FOLDER"
              ERROR_FLAG=1
            fi
            if [ ! -f "$FOLDER/.gitignore" ]; then
              ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta el archivo .gitignore en $FOLDER"
              ERROR_FLAG=1
            fi
            if find "$FOLDER" -type f -name "*solution*" | grep -q .; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No debe haber archivos de solución (e.g., solution.java) en $FOLDER"
                ERROR_FLAG_EXERCISE=1
              fi
              if find "$FOLDER" -type f -name "*test_example*" | grep -q .; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No debe haber archivos de test de ejemplo (e.g., test_example.js) en $FOLDER"
                ERROR_FLAG_EXERCISE=1
              fi
              if ! grep -r "/\*.*\*/" "$FOLDER/src" >/dev/null 2>&1; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nWARNING: No se encontraron comentarios de clase en el código de $FOLDER"
              fi
              if ! grep -r "//.*" "$FOLDER/src" >/dev/null 2>&1; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nWARNING: No se encontraron comentarios de métodos en el código de $FOLDER"
              fi

            # Language-specific validation
            if [ "$LANGUAGE" == "java" ]; then
              java_validation $EXERCISE $FOLDER
            elif [ "$LANGUAGE" == "javascript" ]; then
              javascript_validation $EXERCISE $FOLDER
            fi
          }

          java_validation() {
            EXERCISE=$1
            FOLDER=$2
            # Specific validation checks for Java
            if [ "$EXERCISE" == "1" ]; then
                if ! grep -r "assert.*getTitle.*\"Swag Labs\"" "$FOLDER/src/test/java/"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró un assert para el título en el test de LoginPage (Java)"
                  ERROR_FLAG=1
                fi
              mvn -f "$FOLDER/pom.xml" checkstyle:check || ERROR_FLAG=1
            fi
            # Add additional Java-specific checks here...
            if [ ! -f "$FOLDER/src/pages/LoginPage.java" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo LoginPage.java en el directorio Pages (Java)"
                ERROR_FLAG=1
              else
                # Check for specific selectors related to saucedemo.com
                if ! grep -q 'https://www.saucedemo.com' "$FOLDER/src/pages/LoginPage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró referencia a https://www.saucedemo.com en LoginPage.java (Java)"
                  ERROR_FLAG=1
                fi
                if ! grep -E 'By\..*username|By\..*password|By\..*login-button' "$FOLDER/src/pages/LoginPage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontraron selectores de usuario, contraseña o botón de login en LoginPage.java (Java)"
                  ERROR_FLAG=1
                fi
              fi
          }

          javascript_validation() {
            EXERCISE=$1
            FOLDER=$2
            # Specific validation checks for JavaScript
            npm install --prefix "$FOLDER"
            npx eslint "$FOLDER/src/" || ERROR_FLAG=1
            # Add additional JavaScript-specific checks here...
            if [ "$EXERCISE" == "1" ]; then
                 if ! grep -r "title().should('include', 'Swag Labs')" "$FOLDER/src/tests/"; then
                   ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró un assert para el título en el test de LoginPage (JavaScript)"
                   ERROR_FLAG=1
                 fi
                 if [ ! -f "$FOLDER/src/pages/LoginPage.js" ]; then
                     ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo LoginPage.js en el directorio Pages (JavaScript)"
                     ERROR_FLAG=1
                 else
                     if ! grep -q 'https://www.saucedemo.com' "$FOLDER/src/pages/LoginPage.js"; then
                        ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró referencia a https://www.saucedemo.com en LoginPage.js (JavaScript)"
                        ERROR_FLAG=1
                     fi
                 fi
            fi
          }

          # Iterate through marked exercises
          for EXERCISE in ${{ env.marked_exercises }}; do
            validate_exercise $EXERCISE
          done

          if [ $ERROR_FLAG -eq 1 ]; then
            echo -e "Errores encontrados durante la validación:\n$ERROR_MESSAGES"
            curl -X POST -H "Authorization: token ${{ secrets.TOKEN_GITHUB }}" \
              -d "{\"body\": \"Errores encontrados en la validación del PR:\n$ERROR_MESSAGES\"}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
            exit 1
          fi

      # Close the PR if there are validation errors
      - name: Cerrar PR si hay errores
        if: failure()
        uses: peter-evans/close-pull@v3
        with:
          pull-request-number: ${{ github.event.pull_request.number }}
          token: ${{ secrets.TOKEN_GITHUB }}
          comment: Auto-closing pull request
          delete-branch: false
