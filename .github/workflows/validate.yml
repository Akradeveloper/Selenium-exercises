name: Validar Ejercicio Completo

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Chequear el código
        uses: actions/checkout@v2
        with:
          repository: Akradeveloper/Selenium-exercises
          token: ${{ secrets.TOKEN_GITHUB }}
          ref: ${{ github.head_ref }}

      # Parse PR description to find marked exercises and language
      - name: Analizar descripción del PR
        id: parse_pr_description
        run: |
          PR_DESCRIPTION="${{ github.event.pull_request.body }}"

          # Detect language
          if echo "$PR_DESCRIPTION" | grep -q '\- \[X\] Java'; then
            echo "language=java" >> $GITHUB_ENV
          elif echo "$PR_DESCRIPTION" | grep -q '\- \[X\] JavaScript'; then
            echo "language=javascript" >> $GITHUB_ENV
          else
            echo "ERROR: No se especificó el lenguaje de programación o más de uno fue marcado."
            exit 1
          fi

          # Detect exercises
          EXERCISES=""
          for i in {1..3}; do
            if echo "$PR_DESCRIPTION" | grep -q "\- \[X\] Ejercicio $i"; then
              EXERCISES="$EXERCISES $i"
            fi
          done
          if [ -z "$EXERCISES" ]; then
            echo "ERROR: No se marcaron ejercicios para validar."
            exit 1
          fi
          echo "marked_exercises=$EXERCISES" >> $GITHUB_ENV

      # Validate based on marked exercises and language
      - name: Validar ejercicios seleccionados
        id: validate_exercises
        run: |
          ERROR_FLAG=0  # Initialize the flag at the start
          ERROR_MESSAGES=""  # Store all error messages to post them later
          for EXERCISE in ${{ env.marked_exercises }}; do
            FOLDER="./ejercicio-$EXERCISE"
            
            echo "Validando $FOLDER... con ${{ env.language }}"
            
            # Java validation for Ejercicio 1
            if [[ $EXERCISE == "1" && "${{ env.language }}" == "java" ]]; then
              # Initialize error flag for this specific exercise
              ERROR_FLAG_EXERCISE=0

              if [ ! -d "$FOLDER/src/pages" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta el directorio src/pages en $FOLDER"
                ERROR_FLAG_EXERCISE=1
              fi

              if [ ! -d "$FOLDER/src/tests" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta el directorio src/tests en $FOLDER"
                ERROR_FLAG_EXERCISE=1
              fi

              if [ ! -f "$FOLDER/.gitignore" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta el archivo .gitignore en $FOLDER"
                ERROR_FLAG_EXERCISE=1
              fi

              if find "$FOLDER" -type f -name "*solution*" | grep -q .; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No debe haber archivos de solución (e.g., solution.java) en $FOLDER"
                ERROR_FLAG_EXERCISE=1
              fi

              if find "$FOLDER" -type f -name "*test_example*" | grep -q .; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No debe haber archivos de test de ejemplo (e.g., test_example.js) en $FOLDER"
                ERROR_FLAG_EXERCISE=1
              fi

              if ! grep -r "/\*.*\*/" "$FOLDER/src" >/dev/null 2>&1; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nWARNING: No se encontraron comentarios de clase en el código de $FOLDER"
              fi

              if ! grep -r "//.*" "$FOLDER/src" >/dev/null 2>&1; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nWARNING: No se encontraron comentarios de métodos en el código de $FOLDER"
              fi

              if [ ! -f "$FOLDER/pom.xml" ]; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta el archivo pom.xml en $FOLDER"
                  ERROR_FLAG_EXERCISE=1
              fi

              if ! grep -q "selenium-java" "$FOLDER/pom.xml"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta la dependencia de selenium-java en $FOLDER/pom.xml"
                  ERROR_FLAG_EXERCISE=1
              fi
              mvn -f "$FOLDER/pom.xml" checkstyle:check || ERROR_FLAG_EXERCISE=1

              # Update the overall error flag if any exercise-specific error is found
              if [ $ERROR_FLAG_EXERCISE -eq 1 ]; then
                ERROR_FLAG=1
              fi
            fi
            
            # JavaScript validation for Ejercicio 1
            if [[ $EXERCISE == "1" && "${{ env.language }}" == "javascript" ]]; then
              # Initialize error flag for this specific exercise
              ERROR_FLAG_EXERCISE=0

              if [ ! -f "$FOLDER/package.json" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta el archivo package.json en $FOLDER"
                ERROR_FLAG_EXERCISE=1
              fi

              if ! grep -q "selenium-webdriver" "$FOLDER/package.json"; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta la dependencia selenium-webdriver en $FOLDER/package.json"
                ERROR_FLAG_EXERCISE=1
              fi

              if [ ! -d "$FOLDER/src/pages" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta el directorio src/pages en $FOLDER"
                ERROR_FLAG_EXERCISE=1
              fi

              if [ ! -d "$FOLDER/src/tests" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta el directorio src/tests en $FOLDER"
                ERROR_FLAG_EXERCISE=1
              fi

              npm install --prefix "$FOLDER"
              npx eslint "$FOLDER/src/" || ERROR_FLAG_EXERCISE=1

              # Update the overall error flag if any exercise-specific error is found
              if [ $ERROR_FLAG_EXERCISE -eq 1 ]; then
                ERROR_FLAG=1
              fi
            fi      
          done

          # Post error messages to PR if any validation fails
          if [ $ERROR_FLAG -eq 1 ]; then
            echo -e "Errores encontrados durante la validación:\n$ERROR_MESSAGES"
            curl -X POST -H "Authorization: token ${{ secrets.TOKEN_GITHUB }}" \
              -d "{\"body\": \"Errores encontrados en la validación del PR:\n$ERROR_MESSAGES\"}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
            exit 1
          fi

      # Close the PR if there are validation errors
      - name: Cerrar PR si hay errores
        if: failure()
        uses: peter-evans/close-pull@v3
        with:
          pull-request-number: ${{ github.event.pull_request.number }}
          token: ${{ secrets.TOKEN_GITHUB }}
          comment: Auto-closing pull request
          delete-branch: false
