name: Validar Ejercicio

on:
  pull_request:
    # Este evento se dispara para cualquier PR en cualquier rama
    types: [opened, edited, synchronize, reopened]  # Para que se ejecute cuando el PR se abra, edite o sincronice

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      # Paso para chequear el código
      - name: Chequear el código
        uses: actions/checkout@v2
        with:
          repository: Akradeveloper/Selenium-exercises
          token: ${{ secrets.TOKEN_GITHUB }}
          submodules: recursive  # Asegúrate de que los submódulos también se descarguen

      # Paso para verificar el título del PR
      - name: Verificar título del PR
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ "$PR_TITLE" != *"VERIFY"* ]]; then
            echo "ERROR: El título del PR no contiene la palabra 'VERIFY'."
            exit 1  # Termina el flujo de trabajo si no se encuentra 'VERIFY' en el título del PR
          else
            echo "Título del PR contiene 'VERIFY'. Procediendo con la validación."
          fi

      # Paso para verificar contenido de 'Selenium-exercises'
      - name: Verificar contenido de 'Selenium-exercises'
        run: |
          # Verifica si la carpeta 'Selenium-exercises' existe y muestra su contenido
          ls -R ./

      # Encontrar las subcarpetas de ejercicios
      - name: Encontrar subcarpetas de ejercicios
        id: find_exercises
        run: |
          # Verificar si la carpeta Selenium-exercises existe
          if [ ! -d "./" ]; then
            echo "ERROR: No se encuentra la carpeta Selenium-exercises"
            exit 1
          fi
          # Buscar las subcarpetas que contienen package.json o pom.xml
          EXERCISE_FOLDERS=$(find ./* -maxdepth 1 -type d \( -exec test -e "{}/package.json" \; -o -exec test -e "{}/pom.xml" \; \) -print)
          echo "Subcarpetas encontradas: $EXERCISE_FOLDERS"
          echo "::set-output name=folders::$EXERCISE_FOLDERS"

      # Validar cada ejercicio encontrado
      - name: Validar cada ejercicio
        run: |
          for FOLDER in ${{ steps.find_exercises.outputs.folders }}; do
            echo "Validando carpeta $FOLDER"

            # Validación de estructura de directorios y archivos
            if [ ! -d "$FOLDER/src/pages" ]; then
              echo "ERROR: Falta el directorio src/pages en $FOLDER"
              exit 1
            fi
            if [ ! -d "$FOLDER/src/tests" ]; then
              echo "ERROR: Falta el directorio src/tests en $FOLDER"
              exit 1
            fi
            if [ ! -f "$FOLDER/.gitignore" ]; then
              echo "ERROR: Falta el archivo .gitignore en $FOLDER"
              exit 1
            fi

            # Verificar archivos no permitidos
            if find "$FOLDER" -type f -name "*solution*" | grep -q .; then
              echo "ERROR: No debe haber archivos de solución (e.g., solution.java) en $FOLDER"
              exit 1
            fi
            if find "$FOLDER" -type f -name "*test_example*" | grep -q .; then
              echo "ERROR: No debe haber archivos de test de ejemplo (e.g., test_example.js) en $FOLDER"
              exit 1
            fi

            # Comprobaciones de comentarios
            if ! grep -r "/\*.*\*/" "$FOLDER/src" >/dev/null 2>&1; then
              echo "WARNING: No se encontraron comentarios de clase en el código de $FOLDER"
            fi
            if ! grep -r "//.*" "$FOLDER/src" >/dev/null 2>&1; then
              echo "WARNING: No se encontraron comentarios de métodos en el código de $FOLDER"
            fi

            # Validación de dependencias de Selenium
            if [ -f "$FOLDER/pom.xml" ] && ! grep -q "selenium-java" "$FOLDER/pom.xml"; then
              echo "ERROR: Selenium no está listado como dependencia en pom.xml en $FOLDER"
              exit 1
            fi
            if [ -f "$FOLDER/package.json" ] && ! grep -q "selenium-webdriver" "$FOLDER/package.json"; then
              echo "ERROR: selenium-webdriver no está listado como dependencia en package.json en $FOLDER"
              exit 1
            fi

            # Buscar código comentado en todo el proyecto
            if grep -r "/\*.*" "$FOLDER" | grep -q .; then
              echo "ERROR: El código no debe estar comentado en el repositorio de $FOLDER"
              exit 1
            fi

            # Ejecución de ESLint si existe package.json
            if [ -f "$FOLDER/package.json" ]; then
              echo "Instalando dependencias de JavaScript en $FOLDER..."
              npm install --prefix "$FOLDER"
              echo "Ejecutando ESLint en $FOLDER..."
              npx eslint "$FOLDER/src/" || exit 1
            fi

            # Ejecución de Checkstyle si existe pom.xml
            if [ -f "$FOLDER/pom.xml" ]; then
              echo "Instalando dependencias de Java en $FOLDER..."
              mvn install -f "$FOLDER/pom.xml"
              echo "Ejecutando Checkstyle en $FOLDER..."
              mvn checkstyle:check -f "$FOLDER/pom.xml" || exit 1
            fi
          done
