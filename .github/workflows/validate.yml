name: Validar Ejercicio Completo

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Chequear el código
        uses: actions/checkout@v2
        with:
          repository: Akradeveloper/Selenium-exercises
          token: ${{ secrets.TOKEN_GITHUB }}
          ref: ${{ github.head_ref }}

      # Parse PR description to find marked exercises and language
      - name: Analizar descripción del PR
        id: parse_pr_description
        run: |
          PR_DESCRIPTION="${{ github.event.pull_request.body }}"

          # Detect language
          if echo "$PR_DESCRIPTION" | grep -q '\- \[X\] Java'; then
            echo "language=java" >> $GITHUB_ENV
          elif echo "$PR_DESCRIPTION" | grep -q '\- \[X\] JS'; then
            echo "language=javascript" >> $GITHUB_ENV
          else
            echo "ERROR: No se especificó el lenguaje de programación o más de uno fue marcado."
            exit 1
          fi

          # Detect exercises
          EXERCISES=""
          for i in {1..5}; do
            if echo "$PR_DESCRIPTION" | grep -q "\- \[X\] Ejercicio $i"; then
              EXERCISES="$EXERCISES $i"
            fi
          done
          if [ -z "$EXERCISES" ]; then
            echo "ERROR: No se marcaron ejercicios para validar."
            exit 1
          fi
          echo "marked_exercises=$EXERCISES" >> $GITHUB_ENV

      # Validate based on marked exercises and language
      - name: Validar ejercicios seleccionados
        id: validate_exercises
        run: |
          ERROR_FLAG=0
          ERROR_MESSAGES=""

          validate_exercise() {
            EXERCISE=$1
            FOLDER="./ejercicio-$EXERCISE"
            LANGUAGE="${{ env.language }}"

            # General validation checks
            if [ ! -d "$FOLDER/src/pages" ]; then
              ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta el directorio src/pages en $FOLDER"
              ERROR_FLAG=1
            fi
            if [ ! -d "$FOLDER/src/tests" ]; then
              ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta el directorio src/tests en $FOLDER"
              ERROR_FLAG=1
            fi
            if [ ! -f "$FOLDER/.gitignore" ]; then
              ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta el archivo .gitignore en $FOLDER"
              ERROR_FLAG=1
            fi
            if find "$FOLDER" -type f -name "*solution*" | grep -q .; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No debe haber archivos de solución (e.g., solution.java) en $FOLDER"
                ERROR_FLAG_EXERCISE=1
            fi
            if find "$FOLDER" -type f -name "*test_example*" | grep -q .; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No debe haber archivos de test de ejemplo (e.g., test_example.js) en $FOLDER"
                ERROR_FLAG_EXERCISE=1
            fi
            if ! grep -r "/\*.*\*/" "$FOLDER/src" >/dev/null 2>&1; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nWARNING: No se encontraron comentarios de clase en el código de $FOLDER"
            fi
            if ! grep -r "//.*" "$FOLDER/src" >/dev/null 2>&1; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nWARNING: No se encontraron comentarios de métodos en el código de $FOLDER"
            fi
            # Language-specific validation
            if [ "$LANGUAGE" == "java" ]; then
              # Comprobar si el archivo pom.xml o build.gradle tiene dependencia de Selenium
                if ! grep -q 'org.seleniumhq.selenium' "$FOLDER/pom.xml" && ! grep -q 'selenium-java' "$FOLDER/build.gradle"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta la dependencia de Selenium en el archivo pom.xml o build.gradle (Java)"
                  ERROR_FLAG=1
                fi

                # Validar uso de System.setProperty y new ChromeDriver()
                if ! grep -q 'System.setProperty("webdriver.chrome.driver"' "$FOLDER/src" || ! grep -q 'new ChromeDriver()' "$FOLDER/src"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró configuración correcta de ChromeDriver en el código Java"
                  ERROR_FLAG=1
                fi
              java_validation $EXERCISE $FOLDER
            elif [ "$LANGUAGE" == "javascript" ]; then
              # Comprobar si package.json tiene la dependencia de selenium-webdriver
              if [ ! -f "$FOLDER/package.json" ] || ! grep -q '"selenium-webdriver"' "$FOLDER/package.json"; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta la dependencia de selenium-webdriver en package.json (JavaScript)"
                ERROR_FLAG=1
              fi

              # Validar inicialización del ChromeDriver en código JS
              if ! grep -q "require('selenium-webdriver/chrome')" "$FOLDER/src" || ! grep -q "new Builder().forBrowser('chrome')" "$FOLDER/src"; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró configuración correcta de ChromeDriver en el código JavaScript"
                ERROR_FLAG=1
              fi
              javascript_validation $EXERCISE $FOLDER
            fi
          }

          java_validation() {
            EXERCISE=$1
            FOLDER=$2
            mvn -f "$FOLDER/pom.xml" checkstyle:check || ERROR_FLAG=1
            # Specific validation checks for Java
            if [ "$EXERCISE" == "1" ]; then
                if [ ! -f "$FOLDER/src/pages/LoginPage.java" ]; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo LoginPage.java en el directorio Pages (Java)"
                  ERROR_FLAG=1
                else
                  # Check for specific selectors related to saucedemo.com
                  if ! grep -q 'https://www.saucedemo.com' "$FOLDER/src/pages/LoginPage.java"; then
                    ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró referencia a https://www.saucedemo.com en LoginPage.java (Java)"
                    ERROR_FLAG=1
                  fi
                  if ! grep -E 'By\..*username|By\..*password|By\..*login-button' "$FOLDER/src/pages/LoginPage.java"; then
                    ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontraron selectores de usuario, contraseña o botón de login en LoginPage.java (Java)"
                    ERROR_FLAG=1
                  fi
                fi
                if [ ! -f "$FOLDER/src/pages/LoginTest.java" ]; then
                      ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo LoginTest.java en el directorio Test (Java)"
                      ERROR_FLAG=1
                else      
                  if ! grep -r "assert.*getTitle.*\"Swag Labs\"" "$FOLDER/src/test/java/LoginTest.java"; then
                      ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo LoginTest.java en el directorio Test (Java)"
                      ERROR_FLAG=1
                  fi
                  if ! grep -r "await driver.getTitle().contains.*'Swag Labs'" "$FOLDER/src/test/java/LoginTest.java"; then
                      ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró un assert para el título en el test de LoginTest (Java)"
                      ERROR_FLAG=1
                  fi
                fi 
            fi
            # Add additional Java-specific checks here...
            if [ "$EXERCISE" == "2" ]; then
              # Validar existencia de FormPage.java
              if [ ! -f "$FOLDER/src/pages/FormPage.java" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo FormPage.java en el directorio src/pages (Java)"
                ERROR_FLAG=1
              else
                # Verificar referencias a elementos del formulario
                if ! grep -q 'By.*name.*"firstName"' "$FOLDER/src/pages/FormPage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró un selector para el campo de nombre en FormPage.java (Java)"
                  ERROR_FLAG=1
                fi
                if ! grep -q 'By.*email.*"userEmail"' "$FOLDER/src/pages/FormPage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró un selector para el campo de correo electrónico en FormPage.java (Java)"
                  ERROR_FLAG=1
                fi
                if ! grep -q 'By.*button.*"submit"' "$FOLDER/src/pages/FormPage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró un selector para el botón de envío en FormPage.java (Java)"
                  ERROR_FLAG=1
                fi
              fi

              # Validar existencia de FormTest.java
            if [ ! -f "$FOLDER/src/tests/FormTest.java" ]; then
              ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo FormTest.java en el directorio src/tests (Java)"
              ERROR_FLAG=1
            else
              # Verificar la validación del mensaje de éxito
              if ! grep -q 'assert.*getText.*"Thank you"' "$FOLDER/src/tests/FormTest.java"; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró la validación del mensaje de éxito en FormTest.java (Java)"
                ERROR_FLAG=1
              fi
            fi
          fi

            # Add additional Java-specific checks here...
            if [ "$EXERCISE" == "3" ]; then
              # Validar HomePage.java
              if [ ! -f "$FOLDER/src/pages/HomePage.java" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo HomePage.java en $FOLDER/src/pages (Java)"
                ERROR_FLAG=1
              else
                # Validar que contiene métodos clave
                if ! grep -q 'driver.get("https://www.telerik.com/")' "$FOLDER/src/pages/HomePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el método para navegar a https://www.telerik.com en HomePage.java (Java)"
                  ERROR_FLAG=1
                fi
                if ! grep -q 'driver.findElement(By.*).click()' "$FOLDER/src/pages/HomePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el método para hacer clic en un enlace en HomePage.java (Java)"
                  ERROR_FLAG=1
                fi
              fi

            # Validar DemoPage.java
            if [ ! -f "$FOLDER/src/pages/DemoPage.java" ]; then
              ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo DemoPage.java en $FOLDER/src/pages (Java)"
              ERROR_FLAG=1
            else
              # Validar que contiene método para verificar el título
              if ! grep -q 'assert.*getTitle.*"Demos"' "$FOLDER/src/pages/DemoPage.java"; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró un método para verificar el título en DemoPage.java (Java)"
                ERROR_FLAG=1
              fi
            fi

            # Validar HomeTest.java
            if [ ! -f "$FOLDER/src/tests/HomeTest.java" ]; then
              ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo HomeTest.java en $FOLDER/src/tests (Java)"
              ERROR_FLAG=1
            else
              # Validar que usa HomePage y DemoPage
              if ! grep -q 'HomePage homePage = new HomePage' "$FOLDER/src/tests/HomeTest.java"; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el uso de HomePage en HomeTest.java (Java)"
                ERROR_FLAG=1
              fi
              if ! grep -q 'DemoPage demoPage = new DemoPage' "$FOLDER/src/tests/HomeTest.java"; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el uso de DemoPage en HomeTest.java (Java)"
                ERROR_FLAG=1
              fi
            fi
          fi

            # Add additional Java-specific checks here...
            if [ "$EXERCISE" == "4" ]; then
              # Validar HomePage.java
              if [ ! -f "$FOLDER/src/pages/HomePage.java" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo WaitExamplePage.java en $FOLDER/src/pages (Java)"
                ERROR_FLAG=1
              else
                # Validar que contiene métodos clave
                if ! grep -q 'driver.get("https://www.telerik.com/")' "$FOLDER/src/pages/HomePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el método para navegar a https://www.telerik.com en HomePage.java (Java)"
                  ERROR_FLAG=1
                fi
                if ! grep -q 'WebDriverWait' "$FOLDER/src/pages/HomePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el uso de WebDriverWait para esperas explícitas en HomePage.java (Java)"
                  ERROR_FLAG=1
                fi
                if ! grep -q 'driver.findElement(By.*).click()' "$FOLDER/src/pages/HomePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el método para hacer clic en un botón en HomePage.java (Java)"
                  ERROR_FLAG=1
                fi
              fi

              # Validar HomePage.java
              if [ ! -f "$FOLDER/src/tests/HomePage.java" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo HomePage.java en $FOLDER/src/tests (Java)"
                ERROR_FLAG=1
              else
                # Validar que usa WaitExamplePage
                if ! grep -q 'WaitExamplePage waitPage = new WaitExamplePage' "$FOLDER/src/tests/HomePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el uso de WaitExamplePage en HomePage.java (Java)"
                  ERROR_FLAG=1
                fi
                # Validar que contiene una aserción para confirmar la acción
                if ! grep -q 'assert.*getTitle.*"Expected Title"' "$FOLDER/src/tests/HomePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró una aserción para verificar la acción en HomePage.java (Java)"
                  ERROR_FLAG=1
                fi
              fi
            fi

            # Add additional Java-specific checks here...
            if [ "$EXERCISE" == "5" ]; then  
              # TODO: Add validations for exercise 5
              :       
            fi

            # Add additional Java-specific checks here...
            if [ "$EXERCISE" == "6" ]; then   
              # TODO: Add validations for exercise 6
              :
            fi
            
            # Add additional Java-specific checks here...
          }

          javascript_validation() {
            EXERCISE=$1
            FOLDER=$2
            # Specific validation checks for JavaScript
            
            # Add additional JavaScript-specific checks here...
            # Validate LoginPage.js
            if [ ! -f "$FOLDER/src/pages/LoginPage.js" ]; then
              ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo LoginPage.js en el directorio Pages (JavaScript)"
              ERROR_FLAG=1
            else
            # Check for specific selectors related to saucedemo.com
              if ! grep -q 'https://www.saucedemo.com' "$FOLDER/src/pages/LoginPage.js"; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró referencia a https://www.saucedemo.com en LoginPage.js (JavaScript)"
                ERROR_FLAG=1
              fi
              if ! grep -E 'getElementById.*username|getElementById.*password|getElementById.*login-button' "$FOLDER/src/pages/LoginPage.js"; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontraron selectores de usuario, contraseña o botón de login en LoginPage.js (JavaScript)"
                ERROR_FLAG=1
              fi
            fi

          # Validate LoginTest.js
          if [ ! -f "$FOLDER/src/test/LoginTest.js" ]; then
            ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo LoginTest.js en el directorio Test (JavaScript)"
            ERROR_FLAG=1
          else
            if ! grep -q "expect.*title.*toBe.*'Swag Labs'" "$FOLDER/src/test/LoginTest.js"; then
              ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró una validación para el título en LoginTest.js (JavaScript)"
              ERROR_FLAG=1
            fi
          fi
            # Add additional Java-specific checks here...
            if [ "$EXERCISE" == "2" ]; then
                # Validar existencia de FormPage.js
                if [ ! -f "$FOLDER/src/pages/FormPage.js" ]; then
                    ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo FormPage.js en el directorio src/pages (JavaScript)"
                    ERROR_FLAG=1
                else
                  # Verificar referencias a elementos del formulario
                  if ! grep -q 'document.querySelector.*"#firstName"' "$FOLDER/src/pages/FormPage.js"; then
                    ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró un selector para el campo de nombre en FormPage.js (JavaScript)"
                    ERROR_FLAG=1
                  fi
                  if ! grep -q 'document.querySelector.*"#userEmail"' "$FOLDER/src/pages/FormPage.js"; then
                    ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró un selector para el campo de correo electrónico en FormPage.js (JavaScript)"
                    ERROR_FLAG=1
                  fi
                  if ! grep -q 'document.querySelector.*"#submit"' "$FOLDER/src/pages/FormPage.js"; then
                    ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró un selector para el botón de envío en FormPage.js (JavaScript)"
                    ERROR_FLAG=1
                  fi
                fi

              # Validar existencia de FormTest.js
              if [ ! -f "$FOLDER/src/tests/FormTest.js" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo FormTest.js en el directorio src/tests (JavaScript)"
                ERROR_FLAG=1
              else
                # Verificar la validación del mensaje de éxito
                if ! grep -q 'expect.*getText.*"Thank you"' "$FOLDER/src/tests/FormTest.js"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró la validación del mensaje de éxito en FormTest.js (JavaScript)"
                  ERROR_FLAG=1
                fi
              fi
            fi

            # Add additional Java-specific checks here...
            if [ "$EXERCISE" == "3" ]; then
              # Validar HomePage.js
              if [ ! -f "$FOLDER/src/pages/HomePage.js" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo HomePage.js en $FOLDER/src/pages (JavaScript)"
                ERROR_FLAG=1
              else
                # Validar que contiene métodos clave
                if ! grep -q "async navigateToHome()" "$FOLDER/src/pages/HomePage.js"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el método navigateToHome en HomePage.js (JavaScript)"
                  ERROR_FLAG=1
                fi
                if ! grep -q "async clickDemoLink()" "$FOLDER/src/pages/HomePage.js"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el método clickDemoLink en HomePage.js (JavaScript)"
                  ERROR_FLAG=1
                fi
              fi

              # Validar DemoPage.js
              if [ ! -f "$FOLDER/src/pages/DemoPage.js" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo DemoPage.js en $FOLDER/src/pages (JavaScript)"
                ERROR_FLAG=1
              else
                # Validar que contiene método para verificar el título
                if ! grep -q "async verifyTitle()" "$FOLDER/src/pages/DemoPage.js"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el método verifyTitle en DemoPage.js (JavaScript)"
                  ERROR_FLAG=1
                fi
              fi

              # Validar homeTest.js
              if [ ! -f "$FOLDER/src/tests/homeTest.js" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo homeTest.js en $FOLDER/src/tests (JavaScript)"
                ERROR_FLAG=1
              else
                # Validar que usa HomePage y DemoPage
                if ! grep -q "const HomePage = require('../pages/HomePage')" "$FOLDER/src/tests/homeTest.js"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró la importación de HomePage en homeTest.js (JavaScript)"
                  ERROR_FLAG=1
                fi
                if ! grep -q "const DemoPage = require('../pages/DemoPage')" "$FOLDER/src/tests/homeTest.js"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró la importación de DemoPage en homeTest.js (JavaScript)"
                  ERROR_FLAG=1
                fi
              fi
            fi

            # Add additional Java-specific checks here...
            if [ "$EXERCISE" == "4" ]; then
                # Validar HomePage.js
                if [ ! -f "$FOLDER/src/pages/WaitExamplePage.js" ]; then
                    ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo HomePage.js en $FOLDER/src/pages (JavaScript)"
                    ERROR_FLAG=1
                else
                  # Validar que contiene métodos clave
                  if ! grep -q "async navigateToHome()" "$FOLDER/src/pages/HomePage.js"; then
                    ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el método navigateToHome en HomePage.js (JavaScript)"
                    ERROR_FLAG=1
                  fi
                  if ! grep -q "await page.waitForSelector" "$FOLDER/src/pages/HomePage.js"; then
                    ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el uso de page.waitForSelector para esperas explícitas en HomePage.js (JavaScript)"
                    ERROR_FLAG=1
                  fi
                  if ! grep -q "await page.click" "$FOLDER/src/pages/HomePage.js"; then
                    ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el método para hacer clic en un botón en HomePage.js (JavaScript)"
                    ERROR_FLAG=1
                  fi
                fi

                # Validar homeTest.js
                if [ ! -f "$FOLDER/src/tests/homeTest.js" ]; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo homeTest.js en $FOLDER/src/tests (JavaScript)"
                  ERROR_FLAG=1
                else
                  # Validar que usa WaitExamplePage
                    if ! grep -q "const WaitExamplePage = require('../pages/WaitExamplePage')" "$FOLDER/src/tests/homeTest.js"; then
                      ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró la importación de WaitExamplePage en homeTest.js (JavaScript)"
                      ERROR_FLAG=1
                    fi
                    # Validar que contiene una aserción para confirmar la acción
                    if ! grep -q "expect(page.title()).resolves.toContain('Expected Title')" "$FOLDER/src/tests/homeTest.js"; then
                      ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró una aserción para verificar la acción en homeTest.js (JavaScript)"
                      ERROR_FLAG=1
                    fi
                  fi
                fi

            # Add additional Java-specific checks here...
            if [ "$EXERCISE" == "5" ]; then  
              # TODO: Add validations for exercise 5
              :       
            fi

            # Add additional Java-specific checks here...
            if [ "$EXERCISE" == "6" ]; then   
              # TODO: Add validations for exercise 6
              :
            fi
            
            # Add additional Java-specific checks here...
            npm install --prefix "$FOLDER" || ERROR_FLAG=1
            npx eslint "$FOLDER/src/" || ERROR_FLAG=1
          }

          # Iterate through marked exercises
          for EXERCISE in ${{ env.marked_exercises }}; do
            validate_exercise $EXERCISE
          done

          if [ $ERROR_FLAG -eq 1 ]; then
            echo -e "Errores encontrados durante la validación:\n$ERROR_MESSAGES"
            curl -X POST -H "Authorization: token ${{ secrets.TOKEN_GITHUB }}" \
              -d "{\"body\": \"Errores encontrados en la validación del PR:\n$ERROR_MESSAGES\"}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
            exit 1
          fi

      # Close the PR if there are validation errors
      - name: Cerrar PR si hay errores
        if: failure()
        uses: peter-evans/close-pull@v3
        with:
          pull-request-number: ${{ github.event.pull_request.number }}
          token: ${{ secrets.TOKEN_GITHUB }}
          comment: Auto-closing pull request
          delete-branch: false
