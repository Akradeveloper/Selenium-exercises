name: Validar Ejercicio Completo

on:
  pull_request:
    types: [opened, edited, synchronize, reopened] # Ejecutarse en PRs abiertos, editados, sincronizados o reabiertos
  workflow_dispatch: # Para ejecutar manualmente el flujo

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      # Paso para obtener el código del repositorio
      - name: Chequear el código
        uses: actions/checkout@v2
        with:
          repository: Akradeveloper/Selenium-exercises
          token: ${{ secrets.TOKEN_GITHUB }}
          ref: ${{ github.head_ref }} # Usar la rama del PR

      # Paso para verificar la estructura de los directorios en el repositorio
      - name: Verificar la estructura de directorios
        run: |
          echo "Estructura de directorios:"
          ls -R ./

      # Paso para encontrar subcarpetas que contienen 'src'
      - name: Encontrar subcarpetas con 'src'
        run: |
          # Inicializar variable de carpetas válidas
          VALID_FOLDERS=""

          # Buscar las subcarpetas que contienen un directorio 'src'
          for folder in $(find . -maxdepth 1 -type d); do
            echo "Comprobando carpeta: $folder"
            
            # Comprobar si la carpeta tiene un directorio 'src'
            if [ -d "$folder/src" ]; then
              echo "Directorio 'src' encontrado en $folder"
              VALID_FOLDERS="$VALID_FOLDERS$(basename $folder) "
            fi
          done

          # Mostrar las subcarpetas válidas encontradas
          echo "Subcarpetas válidas encontradas: $VALID_FOLDERS"

          # Establecer la salida para usarla en pasos posteriores
          if [ -n "$VALID_FOLDERS" ]; then
            echo "folders=$VALID_FOLDERS" >> $GITHUB_ENV
          else
            echo "No se encontraron carpetas válidas con 'src'."
          fi

      # Paso para validar cada ejercicio
      - name: Validar cada ejercicio
        run: |
          for FOLDER in ${{ env.folders }}; do
            echo "Validando carpeta $FOLDER"

            # Verificar si la carpeta 'src/pages' existe
            if [ ! -d "$FOLDER/src/pages" ]; then
              echo "ERROR: Falta el directorio src/pages en $FOLDER"
              ERROR_FLAG=1
            fi

            # Verificar si la carpeta 'src/tests' existe
            if [ ! -d "$FOLDER/src/tests" ]; then
              echo "ERROR: Falta el directorio src/tests en $FOLDER"
              ERROR_FLAG=1
            fi

            # Verificar si el archivo .gitignore existe
            if [ ! -f "$FOLDER/.gitignore" ]; then
              echo "ERROR: Falta el archivo .gitignore en $FOLDER"
              ERROR_FLAG=1
            fi

            # Verificar que no haya archivos de solución
            if find "$FOLDER" -type f -name "*solution*" | grep -q .; then
              echo "ERROR: No debe haber archivos de solución (e.g., solution.java) en $FOLDER"
              ERROR_FLAG=1
            fi

            # Verificar que no haya archivos de test de ejemplo
            if find "$FOLDER" -type f -name "*test_example*" | grep -q .; then
              echo "ERROR: No debe haber archivos de test de ejemplo (e.g., test_example.js) en $FOLDER"
              ERROR_FLAG=1
            fi

            # Comprobaciones de comentarios en el código
            if ! grep -r "/\*.*\*/" "$FOLDER/src" >/dev/null 2>&1; then
              echo "WARNING: No se encontraron comentarios de clase en el código de $FOLDER"
            fi
            if ! grep -r "//.*" "$FOLDER/src" >/dev/null 2>&1; then
              echo "WARNING: No se encontraron comentarios de métodos en el código de $FOLDER"
            fi

            # Validación de dependencias de Selenium en pom.xml (para proyectos Java)
            if [[ $EXERCISE == "1" && "${{ env.language }}" == "java" ]]; then
              if [ ! -f "$FOLDER/pom.xml" ]; then
                echo "ERROR: Falta el archivo pom.xml en $FOLDER"
                ERROR_FLAG=1
              fi
              if ! grep -q "selenium-java" "$FOLDER/pom.xml"; then
                echo "ERROR: Falta la dependencia de selenium-java en $FOLDER/pom.xml"
                ERROR_FLAG=1
              fi
              # Verificar si 'pages' y 'tests' existen
              if [ ! -d "$FOLDER/src/pages" ]; then
                echo "ERROR: Falta el directorio src/pages en $FOLDER"
                ERROR_FLAG=1
              fi
              if [ ! -d "$FOLDER/src/tests" ]; then
                echo "ERROR: Falta el directorio src/tests en $FOLDER"
                ERROR_FLAG=1
              fi
              # Ejecutar Checkstyle si pom.xml existe
              mvn -f "$FOLDER/pom.xml" checkstyle:check || ERROR_FLAG=1
            fi

            # Validación de dependencias de Selenium en package.json (para proyectos JavaScript)
            if [[ $EXERCISE == "1" && "${{ env.language }}" == "javascript" ]]; then
              if [ ! -f "$FOLDER/package.json" ]; then
                echo "ERROR: Falta el archivo package.json en $FOLDER"
                ERROR_FLAG=1
              fi
              if ! grep -q "selenium-webdriver" "$FOLDER/package.json"; then
                echo "ERROR: Falta la dependencia selenium-webdriver en $FOLDER/package.json"
                ERROR_FLAG=1
              fi
              # Verificar si 'pages' y 'tests' existen
              if [ ! -d "$FOLDER/src/pages" ]; then
                echo "ERROR: Falta el directorio src/pages en $FOLDER"
                ERROR_FLAG=1
              fi
              if [ ! -d "$FOLDER/src/tests" ]; then
                echo "ERROR: Falta el directorio src/tests en $FOLDER"
                ERROR_FLAG=1
              fi
              # Ejecutar ESLint si package.json existe
              npm install --prefix "$FOLDER"
              npx eslint "$FOLDER/src/" || ERROR_FLAG=1
            fi
          done

          # Si se encontró un error, terminar con exit 1
          if [ $ERROR_FLAG -eq 1 ]; then
            exit 1
          fi
