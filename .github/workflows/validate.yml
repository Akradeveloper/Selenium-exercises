name: Validar Ejercicio Completo

on:
  pull_request:
    paths:
      - "Selenium-exercises/**" # Detecta cambios en cualquier archivo dentro de 'Selenium-exercises'

  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      # Paso para obtener el código del repositorio
      - name: Chequear el código
        uses: actions/checkout@v2
        with:
          repository: Akradeveloper/Selenium-exercises
          token: ${{ secrets.TOKEN_GITHUB }}
          ref: ${{ github.head_ref }} # La rama del PR

      # Paso para verificar la estructura de los directorios en el repositorio
      - name: Verificar la estructura de directorios
        run: |
          echo "Estructura de directorios:"
          ls -R Selenium-exercises

      # Paso para encontrar subcarpetas que contienen package.json o pom.xml
      - name: Encontrar subcarpetas de ejercicios
        id: find_exercises
        run: |
          # Busca todas las subcarpetas dentro de 'Selenium-exercises' que contengan package.json o pom.xml
          EXERCISE_FOLDERS=$(find Selenium-exercises/* -type d \( -exec test -e "{}/package.json" \; -o -exec test -e "{}/pom.xml" \; \) -print)
          echo "Subcarpetas encontradas: $EXERCISE_FOLDERS"
          echo "::set-output name=folders::$EXERCISE_FOLDERS"

      # Validar cada subcarpeta de ejercicios con las verificaciones adicionales
      - name: Validar cada ejercicio
        run: |
          for FOLDER in ${{ steps.find_exercises.outputs.folders }}; do
            echo "Validando carpeta $FOLDER"
            
            # Verificar si la carpeta 'src/pages' existe
            if [ ! -d "$FOLDER/src/pages" ]; then
              echo "ERROR: Falta el directorio src/pages en $FOLDER"
              exit 1
            fi

            # Verificar si la carpeta 'src/tests' existe
            if [ ! -d "$FOLDER/src/tests" ]; then
              echo "ERROR: Falta el directorio src/tests en $FOLDER"
              exit 1
            fi

            # Verificar si el archivo .gitignore existe
            if [ ! -f "$FOLDER/.gitignore" ]; then
              echo "ERROR: Falta el archivo .gitignore en $FOLDER"
              exit 1
            fi

            # Verificar que no haya archivos de solución
            if find "$FOLDER" -type f -name "*solution*" | grep -q .; then
              echo "ERROR: No debe haber archivos de solución (e.g., solution.java) en $FOLDER"
              exit 1
            fi

            # Verificar que no haya archivos de test de ejemplo
            if find "$FOLDER" -type f -name "*test_example*" | grep -q .; then
              echo "ERROR: No debe haber archivos de test de ejemplo (e.g., test_example.js) en $FOLDER"
              exit 1
            fi

            # Comprobaciones de comentarios en el código
            if ! grep -r "/\*.*\*/" "$FOLDER/src" >/dev/null 2>&1; then
              echo "WARNING: No se encontraron comentarios de clase en el código de $FOLDER"
            fi
            if ! grep -r "//.*" "$FOLDER/src" >/dev/null 2>&1; then
              echo "WARNING: No se encontraron comentarios de métodos en el código de $FOLDER"
            fi

            # Validación de dependencias de Selenium en pom.xml (para proyectos Java)
            if [ -f "$FOLDER/pom.xml" ] && ! grep -q "selenium-java" "$FOLDER/pom.xml"; then
              echo "ERROR: Selenium no está listado como dependencia en pom.xml en $FOLDER"
              exit 1
            fi

            # Validación de dependencias de Selenium en package.json (para proyectos JavaScript)
            if [ -f "$FOLDER/package.json" ] && ! grep -q "selenium-webdriver" "$FOLDER/package.json"; then
              echo "ERROR: selenium-webdriver no está listado como dependencia en package.json en $FOLDER"
              exit 1
            fi

            # Buscar código comentado en todo el proyecto
            if grep -r "/\*.*" "$FOLDER" | grep -q .; then
              echo "ERROR: El código no debe estar comentado en el repositorio de $FOLDER"
              exit 1
            fi

            # Ejecutar ESLint si existe package.json (para proyectos JavaScript)
            if [ -f "$FOLDER/package.json" ]; then
              echo "Instalando dependencias de JavaScript en $FOLDER..."
              npm install --prefix "$FOLDER"
              echo "Ejecutando ESLint en $FOLDER..."
              npx eslint "$FOLDER/src/" || exit 1
            fi

            # Ejecutar Checkstyle si existe pom.xml (para proyectos Java)
            if [ -f "$FOLDER/pom.xml" ]; then
              echo "Instalando dependencias de Java en $FOLDER..."
              mvn install -f "$FOLDER/pom.xml"
              echo "Ejecutando Checkstyle en $FOLDER..."
              mvn checkstyle:check -f "$FOLDER/pom.xml" || exit 1
            fi
          done
