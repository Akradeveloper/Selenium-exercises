name: Validate Exercises

on:
  workflow_run:
    workflows: ["PR Check"]
    types:
      - completed

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Validate marked exercises
        run: |
          ERROR_FLAG=0
          ERROR_MESSAGES=""
          validate_exercise() {
            EXERCISE=$1
            FOLDER="./ejercicio-$EXERCISE"
            LANGUAGE="${{ env.language }}"
            # General validation checks
            if [ ! -d "$FOLDER/src/pages" ]; then
              ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta el directorio src/pages en $FOLDER"
              ERROR_FLAG=1
            fi
            if [ ! -d "$FOLDER/src/tests" ]; then
              ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta el directorio src/tests en $FOLDER"
              ERROR_FLAG=1
            fi
            if [ ! -f "$FOLDER/.gitignore" ]; then
              ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta el archivo .gitignore en $FOLDER"
              ERROR_FLAG=1
            fi
            if find "$FOLDER" -type f -name "*solution*" | grep -q .; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No debe haber archivos de solución (e.g., solution.java) en $FOLDER"
                ERROR_FLAG_EXERCISE=1
            fi
            if find "$FOLDER" -type f -name "*test_example*" | grep -q .; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No debe haber archivos de test de ejemplo (e.g., test_example.js) en $FOLDER"
                ERROR_FLAG_EXERCISE=1
            fi
            if ! grep -r "/\*.*\*/" "$FOLDER/src" >/dev/null 2>&1; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nWARNING: No se encontraron comentarios de clase en el código de $FOLDER"
            fi
            if ! grep -r "//.*" "$FOLDER/src" >/dev/null 2>&1; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nWARNING: No se encontraron comentarios de métodos en el código de $FOLDER"
            fi
            # Language-specific validation
            if [ "$LANGUAGE" == "java" ]; then
              # Comprobar si el archivo pom.xml o build.gradle tiene dependencia de Selenium
                if ! grep -q 'org.seleniumhq.selenium' "$FOLDER/pom.xml" && ! grep -q 'selenium-java' "$FOLDER/build.gradle"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta la dependencia de Selenium en el archivo pom.xml o build.gradle (Java)"
                  ERROR_FLAG=1
                fi
                # Validar uso de System.setProperty y new ChromeDriver()
                if ! grep -q 'System.setProperty("webdriver.chrome.driver"' "$FOLDER/src" || ! grep -q 'new ChromeDriver()' "$FOLDER/src"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró configuración correcta de ChromeDriver en el código Java"
                  ERROR_FLAG=1
                fi
              java_validation $EXERCISE $FOLDER
            elif [ "$LANGUAGE" == "javascript" ]; then
              # Comprobar si package.json tiene la dependencia de selenium-webdriver
              if [ ! -f "$FOLDER/package.json" ] || ! grep -q '"selenium-webdriver"' "$FOLDER/package.json"; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: Falta la dependencia de selenium-webdriver en package.json (JavaScript)"
                ERROR_FLAG=1
              fi
              # Validar inicialización del ChromeDriver en código JS
              if ! grep -q "require('selenium-webdriver/chrome')" "$FOLDER/src" || ! grep -q "new Builder().forBrowser('chrome')" "$FOLDER/src"; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró configuración correcta de ChromeDriver en el código JavaScript"
                ERROR_FLAG=1
              fi
              javascript_validation $EXERCISE $FOLDER
            fi
          }
          java_validation() {
            EXERCISE=$1
            FOLDER=$2
            mvn -f "$FOLDER/pom.xml" checkstyle:check || ERROR_FLAG=1
            # Specific validation checks for Java
            if [ "$EXERCISE" == "1" ]; then
                if [ ! -f "$FOLDER/src/pages/LoginPage.java" ]; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo LoginPage.java en el directorio Pages (Java)"
                  ERROR_FLAG=1
                else
                  # Check for specific selectors related to saucedemo.com
                  if ! grep -q 'https://www.saucedemo.com' "$FOLDER/src/pages/LoginPage.java"; then
                    ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró referencia a https://www.saucedemo.com en LoginPage.java (Java)"
                    ERROR_FLAG=1
                  fi
                  if ! grep -E 'By\..*username|By\..*password|By\..*login-button' "$FOLDER/src/pages/LoginPage.java"; then
                    ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontraron selectores de usuario, contraseña o botón de login en LoginPage.java (Java)"
                    ERROR_FLAG=1
                  fi
                fi
                if [ ! -f "$FOLDER/src/pages/LoginTest.java" ]; then
                      ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo LoginTest.java en el directorio Test (Java)"
                      ERROR_FLAG=1
                else      
                  if ! grep -r "assert.*getTitle.*\"Swag Labs\"" "$FOLDER/src/test/java/LoginTest.java"; then
                      ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo LoginTest.java en el directorio Test (Java)"
                      ERROR_FLAG=1
                  fi
                  if ! grep -r "await driver.getTitle().contains.*'Swag Labs'" "$FOLDER/src/test/java/LoginTest.java"; then
                      ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró un assert para el título en el test de LoginTest (Java)"
                      ERROR_FLAG=1
                  fi
                fi 
            fi
            # Add additional Java-specific checks here...
            if [ "$EXERCISE" == "2" ]; then
              # Validar existencia de FormPage.java
              if [ ! -f "$FOLDER/src/pages/FormPage.java" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo FormPage.java en el directorio src/pages (Java)"
                ERROR_FLAG=1
              else
                # Verificar referencias a elementos del formulario
                if ! grep -q 'By.*name.*"firstName"' "$FOLDER/src/pages/FormPage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró un selector para el campo de nombre en FormPage.java (Java)"
                  ERROR_FLAG=1
                fi
                if ! grep -q 'By.*email.*"userEmail"' "$FOLDER/src/pages/FormPage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró un selector para el campo de correo electrónico en FormPage.java (Java)"
                  ERROR_FLAG=1
                fi
                if ! grep -q 'By.*button.*"submit"' "$FOLDER/src/pages/FormPage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró un selector para el botón de envío en FormPage.java (Java)"
                  ERROR_FLAG=1
                fi
              fi
              # Validar existencia de FormTest.java
            if [ ! -f "$FOLDER/src/tests/FormTest.java" ]; then
              ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo FormTest.java en el directorio src/tests (Java)"
              ERROR_FLAG=1
            else
              # Verificar la validación del mensaje de éxito
              if ! grep -q 'assert.*getText.*"Thank you"' "$FOLDER/src/tests/FormTest.java"; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró la validación del mensaje de éxito en FormTest.java (Java)"
                ERROR_FLAG=1
              fi
            fi
          fi
            # Add additional Java-specific checks here...
            if [ "$EXERCISE" == "3" ]; then
              # Validar HomePage.java
              if [ ! -f "$FOLDER/src/pages/HomePage.java" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo HomePage.java en $FOLDER/src/pages (Java)"
                ERROR_FLAG=1
              else
                # Validar que contiene métodos clave
                if ! grep -q 'driver.get("https://www.telerik.com/")' "$FOLDER/src/pages/HomePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el método para navegar a https://www.telerik.com en HomePage.java (Java)"
                  ERROR_FLAG=1
                fi
                if ! grep -q 'driver.findElement(By.*).click()' "$FOLDER/src/pages/HomePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el método para hacer clic en un enlace en HomePage.java (Java)"
                  ERROR_FLAG=1
                fi
              fi
            # Validar DemoPage.java
            if [ ! -f "$FOLDER/src/pages/DemoPage.java" ]; then
              ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo DemoPage.java en $FOLDER/src/pages (Java)"
              ERROR_FLAG=1
            else
              # Validar que contiene método para verificar el título
              if ! grep -q 'assert.*getTitle.*"Demos"' "$FOLDER/src/pages/DemoPage.java"; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró un método para verificar el título en DemoPage.java (Java)"
                ERROR_FLAG=1
              fi
            fi
            # Validar HomeTest.java
            if [ ! -f "$FOLDER/src/tests/HomeTest.java" ]; then
              ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo HomeTest.java en $FOLDER/src/tests (Java)"
              ERROR_FLAG=1
            else
              # Validar que usa HomePage y DemoPage
              if ! grep -q 'HomePage homePage = new HomePage' "$FOLDER/src/tests/HomeTest.java"; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el uso de HomePage en HomeTest.java (Java)"
                ERROR_FLAG=1
              fi
              if ! grep -q 'DemoPage demoPage = new DemoPage' "$FOLDER/src/tests/HomeTest.java"; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el uso de DemoPage en HomeTest.java (Java)"
                ERROR_FLAG=1
              fi
            fi
          fi
            # Add additional Java-specific checks here...
            if [ "$EXERCISE" == "4" ]; then
              # Validar HomePage.java
              if [ ! -f "$FOLDER/src/pages/HomePage.java" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo WaitExamplePage.java en $FOLDER/src/pages (Java)"
                ERROR_FLAG=1
              else
                # Validar que contiene métodos clave
                if ! grep -q 'driver.get("https://www.telerik.com/")' "$FOLDER/src/pages/HomePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el método para navegar a https://www.telerik.com en HomePage.java (Java)"
                  ERROR_FLAG=1
                fi
                if ! grep -q 'WebDriverWait' "$FOLDER/src/pages/HomePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el uso de WebDriverWait para esperas explícitas en HomePage.java (Java)"
                  ERROR_FLAG=1
                fi
                if ! grep -q 'driver.findElement(By.*).click()' "$FOLDER/src/pages/HomePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el método para hacer clic en un botón en HomePage.java (Java)"
                  ERROR_FLAG=1
                fi
              fi
              # Validar HomePage.java
              if [ ! -f "$FOLDER/src/tests/HomePage.java" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo HomePage.java en $FOLDER/src/tests (Java)"
                ERROR_FLAG=1
              else
                # Validar que usa WaitExamplePage
                if ! grep -q 'WaitExamplePage waitPage = new WaitExamplePage' "$FOLDER/src/tests/HomePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el uso de WaitExamplePage en HomePage.java (Java)"
                  ERROR_FLAG=1
                fi
                # Validar que contiene una aserción para confirmar la acción
                if ! grep -q 'assert.*getTitle.*"Expected Title"' "$FOLDER/src/tests/HomePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró una aserción para verificar la acción en HomePage.java (Java)"
                  ERROR_FLAG=1
                fi
              fi
            fi
            # Add additional Java-specific checks here...
            if [ "$EXERCISE" == "5" ]; then        
              # Validar TablePage.java
              if [ ! -f "$FOLDER/src/pages/TablePage.java" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo TablePage.java en $FOLDER/src/pages (Java)"
                ERROR_FLAG=1
              else
                # Validar que contiene métodos clave
                if ! grep -q 'datatable' "$FOLDER/src/pages/TablePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró la referencia al datatable en TablePage.java (Java)"
                  ERROR_FLAG=1
                fi
                if ! grep -q 'WebDriver' "$FOLDER/src/pages/TablePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el uso de WebDriver en TablePage.java (Java)"
                  ERROR_FLAG=1
                fi
                if ! grep -q 'By' "$FOLDER/src/pages/TablePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el uso de By en TablePage.java (Java)"
                  ERROR_FLAG=1
                fi
                if ! grep -q 'WebDriverWait' "$FOLDER/src/pages/TablePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el uso de WebDriverWait en TablePage.java (Java)"
                  ERROR_FLAG=1
                fi
                if ! grep -q 'driver.findElement' "$FOLDER/src/pages/TablePage.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el método para interactuar con los elementos de la tabla (driver.findElement) en TablePage.java (Java)"
                  ERROR_FLAG=1
                fi
              fi
              # Validar Test para TablePage
              if [ ! -f "$FOLDER/src/tests/TablePageTest.java" ]; then
                ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el archivo TablePageTest.java en $FOLDER/src/tests (Java)"
                ERROR_FLAG=1
              else
                # Validar que usa TablePage
                if ! grep -q 'TablePage tablePage = new TablePage' "$FOLDER/src/tests/TablePageTest.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró el uso de TablePage en TablePageTest.java (Java)"
                  ERROR_FLAG=1
                fi
                # Validar que contiene pruebas de interacción con la tabla (ordenar, filtrar, etc.)
                if ! grep -q 'datatable' "$FOLDER/src/tests/TablePageTest.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró interacción con la tabla (datatable) en TablePageTest.java (Java)"
                  ERROR_FLAG=1
                fi
                if ! grep -q 'assert' "$FOLDER/src/tests/TablePageTest.java"; then
                  ERROR_MESSAGES="$ERROR_MESSAGES\nERROR: No se encontró una aserción para verificar la acción en TablePageTest.java (Java)"
                  ERROR_FLAG=1
                fi
              fi
            fi
            # Add additional Java-specific checks here...
          }

          if [ $ERROR_FLAG -eq 1 ]; then
            echo -e "Errores encontrados durante la validación:\n$ERROR_MESSAGES"
          else
            echo "Validación completada sin errores."
          fi

          # Exportar resultados para el próximo workflow
          echo "ERROR_FLAG=$ERROR_FLAG" >> $GITHUB_ENV
          echo "ERROR_MESSAGES=$ERROR_MESSAGES" >> $GITHUB_ENV
      - name: Set outputs for next workflow
        id: set_outputs
        run: |
          echo "::set-output name=error_flag::${{ env.ERROR_FLAG }}"
          echo "::set-output name=error_messages::${{ env.ERROR_MESSAGES }}"
